# -*- coding: utf-8 -*-
"""Eye_Tracking_visual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IXiBLQI5OkNvb7UnaRTV1AaklXMLIpn-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import kstest

# Load the .csv file without headers
data = pd.read_csv("/content/004_1_Reshma_xy.csv", header=None, names=['x', 'y'])
data.dropna(inplace=True)  # Ensure no empty rows

# Extract x and y coordinates
x, y = data['x'].values, data['y'].values

# Calculate step lengths (Euclidean distance between consecutive points)
step_lengths = np.sqrt(np.diff(x)**2 + np.diff(y)**2)

# Calculate turning angles
dx = np.diff(x)
dy = np.diff(y)
directions = np.arctan2(dy, dx)
turning_angles = np.diff(directions)
# Normalize turning angles between -π and π
turning_angles = (turning_angles + np.pi) % (2 * np.pi) - np.pi

# Step 1: Analyze Step Length Distribution
# Plot step length distribution on a log-log scale
plt.figure(figsize=(8, 6))
plt.hist(step_lengths, bins=50, density=True, log=True)
plt.xlabel("Step Length (log scale)")
plt.ylabel("Frequency (log scale)")
plt.title("Step Length Distribution")
plt.show()

# Estimate the power-law exponent (alpha) using maximum likelihood
alpha_estimate = 1 + len(step_lengths) / np.sum(np.log(step_lengths / min(step_lengths)))
print(f"Estimated alpha: {alpha_estimate}")

# KS test for power-law distribution
step_lengths_norm = (step_lengths - min(step_lengths)) / (max(step_lengths) - min(step_lengths))
ks_stat, p_value = kstest(step_lengths_norm, 'powerlaw', args=(alpha_estimate,))
print(f"KS test statistic: {ks_stat}, p-value: {p_value}")

# Step 2: Analyze Turning Angle Distribution
# Plot turning angle distribution
plt.figure(figsize=(8, 6))
plt.hist(turning_angles, bins=30, density=True)
plt.xlabel("Turning Angle (radians)")
plt.ylabel("Frequency")
plt.title("Turning Angle Distribution")
plt.show()

# Summary statistics for turning angles
mean_angle = np.mean(turning_angles)
std_angle = np.std(turning_angles)
print(f"Mean Turning Angle: {mean_angle:.2f} radians")
print(f"Standard Deviation of Turning Angles: {std_angle:.2f} radians")

# Interpretation of Results
if 1 < alpha_estimate < 3 and p_value > 0.05:
    print("The distribution likely follows a Lévy flight.")
else:
    print("The distribution does not resemble a Lévy flight.")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import kstest

# Load the .csv file without headers
data = pd.read_csv("/content/003_2_Deepa_xy.csv", header=None, names=['x', 'y'])
data.dropna(inplace=True)  # Ensure no empty rows

# Extract x and y coordinates
x, y = data['x'].values, data['y'].values

# Calculate step lengths (Euclidean distance between consecutive points)
step_lengths = np.sqrt(np.diff(x)**2 + np.diff(y)**2)

# Calculate turning angles
dx = np.diff(x)
dy = np.diff(y)
directions = np.arctan2(dy, dx)
turning_angles = np.diff(directions)
# Normalize turning angles between -π and π
turning_angles = (turning_angles + np.pi) % (2 * np.pi) - np.pi

# Step 1: Analyze Step Length Distribution
# Plot step length distribution on a log-log scale
plt.figure(figsize=(8, 6))
plt.hist(step_lengths, bins=50, density=True, log=True)
plt.xlabel("Step Length (log scale)")
plt.ylabel("Frequency (log scale)")
plt.title("Step Length Distribution")
plt.show()

# Estimate the power-law exponent (alpha) using maximum likelihood
alpha_estimate = 1 + len(step_lengths) / np.sum(np.log(step_lengths / min(step_lengths)))
print(f"Estimated alpha: {alpha_estimate}")

# KS test for power-law distribution
step_lengths_norm = (step_lengths - min(step_lengths)) / (max(step_lengths) - min(step_lengths))
ks_stat, p_value = kstest(step_lengths_norm, 'powerlaw', args=(alpha_estimate,))
print(f"KS test statistic: {ks_stat}, p-value: {p_value}")

# Step 2: Analyze Turning Angle Distribution
# Plot turning angle distribution
plt.figure(figsize=(8, 6))
plt.hist(turning_angles, bins=30, density=True)
plt.xlabel("Turning Angle (radians)")
plt.ylabel("Frequency")
plt.title("Turning Angle Distribution")
plt.show()

# Summary statistics for turning angles
mean_angle = np.mean(turning_angles)
std_angle = np.std(turning_angles)
print(f"Mean Turning Angle: {mean_angle:.2f} radians")
print(f"Standard Deviation of Turning Angles: {std_angle:.2f} radians")

# Interpretation of Results
if 1 < alpha_estimate < 3 and p_value > 0.05:
    print("The distribution likely follows a Lévy flight.")
else:
    print("The distribution does not resemble a Lévy flight.")

pip install powerlaw

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import kstest
import powerlaw  # Ensure this package is installed (pip install powerlaw)

# Load the .csv file without headers
data = pd.read_csv("/content/006_5_Poojitha_cidermaking_xy.csv", header=None, names=['x', 'y'])
data.dropna(inplace=True)  # Ensure no empty rows

# Extract x and y coordinates
x, y = data['x'].values, data['y'].values

# Calculate step lengths (Euclidean distance between consecutive points)
step_lengths = np.sqrt(np.diff(x)**2 + np.diff(y)**2)

# Remove zero step lengths to avoid log errors
step_lengths = step_lengths[step_lengths > 0]

# Calculate turning angles
dx = np.diff(x)
dy = np.diff(y)
directions = np.arctan2(dy, dx)
turning_angles = np.diff(directions)
# Normalize turning angles between -π and π
turning_angles = (turning_angles + np.pi) % (2 * np.pi) - np.pi

# Step 1: Analyze Step Length Distribution
# Plot step length distribution on a log-log scale
plt.figure(figsize=(8, 6))
plt.hist(step_lengths, bins=50, density=True, log=True)
plt.xlabel("Step Length (log scale)")
plt.ylabel("Frequency (log scale)")
plt.title("Step Length Distribution")
plt.show()

# Alternative Power-law Fitting using powerlaw package
# Directly fit step lengths to a power law
fit = powerlaw.Fit(step_lengths)
alpha_estimate = fit.power_law.alpha
p_value = fit.power_law.D

print(f"Estimated alpha: {alpha_estimate}")
print(f"p-value for power-law fit: {p_value}")

# Step 2: Analyze Turning Angle Distribution
# Plot turning angle distribution
plt.figure(figsize=(8, 6))
plt.hist(turning_angles, bins=30, density=True)
plt.xlabel("Turning Angle (radians)")
plt.ylabel("Frequency")
plt.title("Turning Angle Distribution")
plt.show()

# Summary statistics for turning angles
mean_angle = np.mean(turning_angles)
std_angle = np.std(turning_angles)
print(f"Mean Turning Angle: {mean_angle:.2f} radians")
print(f"Standard Deviation of Turning Angles: {std_angle:.2f} radians")

# Interpretation of Results
if 1 < alpha_estimate < 3 and p_value > 0.05:
    print("The distribution likely follows a Lévy flight.")
else:
    print("The distribution does not resemble a Lévy flight.")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress

# Load the .csv file without headers
data = pd.read_csv("/content/004_1_Reshma_xy.csv", header=None, names=['x', 'y'])
data.dropna(inplace=True)

# Extract x and y coordinates
x, y = data['x'].values, data['y'].values

# Calculate step lengths (Euclidean distance between consecutive points)
step_lengths = np.sqrt(np.diff(x)**2 + np.diff(y)**2)

# Remove zero step lengths to avoid log errors
step_lengths = step_lengths[step_lengths > 0]

# Determine the tail threshold (e.g., top 10% of step lengths)
threshold = np.percentile(step_lengths, 90)
tail_step_lengths = step_lengths[step_lengths > threshold]

# Log-transform the step lengths and their frequencies for the tail
log_step_lengths = np.log(tail_step_lengths)
hist, bin_edges = np.histogram(log_step_lengths, bins=20, density=True)
log_bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
log_counts = np.log(hist[hist > 0])  # Remove bins with zero frequency

# Linear fit on the tail in log-log space
slope, intercept, r_value, p_value, std_err = linregress(log_bin_centers, log_counts)
print(f"Slope (power-law exponent estimate): {slope}")
print(f"Intercept: {intercept}")

# Plot the step length distribution and the linear fit for the tail
plt.figure(figsize=(8, 6))
plt.hist(step_lengths, bins=50, density=True, log=True, alpha=0.6, label="Step Length Distribution")
plt.plot(np.exp(log_bin_centers), np.exp(intercept + slope * log_bin_centers), 'r-', label="Tail Fit")
plt.xlabel("Step Length (log scale)")
plt.ylabel("Frequency (log scale)")
plt.title("Step Length Distribution with Tail Fit")
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Load CSV data without headers
csv_file_path = '/content/006_5_Poojitha_cidermaking_xy.csv'  # Replace with the path to your CSV file
data = pd.read_csv(csv_file_path, header=None, names=['x', 'y'])  # Specify column names manually

# Load background image
image_file_path = '/content/SENAI_Group-1.png'  # Replace with the path to your image file
background_image = Image.open(image_file_path)

# Set up plot with the image as background
fig, ax = plt.subplots()
ax.imshow(background_image, extent=[data['x'].min(), data['x'].max(), data['y'].min(), data['y'].max()])

# Plot the x, y data points
ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=2, markersize=5)

# Set labels and title
ax.set_xlabel('X values')
ax.set_ylabel('Y values')
ax.set_title('Plot of X, Y Data with Background Image')

# Show the plot
plt.show()

# prompt: size of image

import pandas as pd
from PIL import Image

# Load CSV data without headers
csv_file_path = '/content/006_5_Poojitha_cidermaking_xy.csv'  # Replace with the path to your CSV file
data = pd.read_csv(csv_file_path, header=None, names=['x', 'y'])  # Specify column names manually

# Load background image
image_file_path = '/content/SENAI_Group-1.png'  # Replace with the path to your image file
background_image = Image.open(image_file_path)

# Get the size of the image
width, height = background_image.size
print(f"Image width: {width}, Image height: {height}")

import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Load CSV data without headers
csv_file_path = '/content/006_5_Poojitha_cidermaking_xy.csv'  # Replace with the path to your CSV file
data = pd.read_csv(csv_file_path, header=None, names=['x', 'y'])  # Specify column names manually

# Load and resize background image to 1920x1080
image_file_path = '/content/SENAI_Group-1.png'  # Replace with the path to your image file
background_image = Image.open(image_file_path).resize((1920, 1080))

# Set up plot with specific axis limits
fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

# Display the image within the axes, fitted to 1920x1080 range
ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

# Plot the x, y data points
ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

# Set axis limits to match the specified range
ax.set_xlim(0, 1920)
ax.set_ylim(0, 1080)

# Invert the y-axis to place origin at the top-left corner for the plot only
ax.invert_yaxis()

# Set labels and title
ax.set_xlabel('x, pixels', fontsize = 12)
ax.set_ylabel('y, pixels', fontsize = 12)
#ax.set_title('Plot of X, Y Data with Background Image (Top-Left Origin for Plot)')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Load CSV data without headers
csv_file_path = '/content/006_5_Poojitha_cidermaking_xy.csv'  # Replace with the path to your CSV file
data = pd.read_csv(csv_file_path, header=None, names=['x', 'y'])  # Specify column names manually

# Load and resize background image to 1920x1080
image_file_path = '/content/SENAI_Group-1.png'  # Replace with the path to your image file
background_image = Image.open(image_file_path).resize((1920, 1080))

# Set up plot with specific axis limits
fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

# Display the image within the axes, fitted to 1920x1080 range
ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

# Plot the x, y data points
ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

# Set axis limits to match the specified range
ax.set_xlim(800, 950)
ax.set_ylim(700, 900)

# Invert the y-axis to place origin at the top-left corner for the plot only
ax.invert_yaxis()

# Set labels and title
ax.set_xlabel('X values (0 to 1920)')
ax.set_ylabel('Y values (0 to 1080)')
ax.set_title('Plot of X, Y Data with Background Image (Top-Left Origin for Plot)')

# Show the plot
plt.show()

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# Set the folder containing the CSV files
folder_path = "/content/Group 2"  # Replace with your folder path
background_image_path = "/content/SENAI_Group-2.png"  # Replace with your background image path

# Initialize lists to store all x and y values
all_x = []
all_y = []

# Process each CSV file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):
        file_path = os.path.join(folder_path, file_name)

        # Read the CSV file (assuming no headers)
        data = pd.read_csv(file_path, header=None, names=['x', 'y'])

        # Drop empty rows
        data = data.dropna()

        # Limit to the first 3600 points
        data = data.iloc[:3600]

        # Store x and y values
        all_x.append(data['x'].values)
        all_y.append(data['y'].values)

        # Plot individual file
        plt.figure()
        plt.plot(data['x'], data['y'], label=f"{file_name}", linestyle='-', marker='o')
        plt.xlabel('X Values')
        plt.ylabel('Y Values')
        plt.title(f"Plot for {file_name} (First 3600 Points)")
        plt.legend()
        plt.grid(True)
        plt.show()

# Calculate the average x, y values
average_x = np.mean(np.array(all_x), axis=0)
average_y = np.mean(np.array(all_y), axis=0)

# Load the background image and resize it to fit the plot
background_image = Image.open(background_image_path).resize((1920, 1080))

# Plot the average plot with the background image
fig, ax = plt.subplots(figsize=(10, 5.625))  # Maintain 16:9 aspect ratio

# Add the background image
ax.imshow(background_image, extent=[0, 1920, 0, 1080], aspect='auto', zorder=1)

# Plot the average x, y values (First 3600 points)
ax.plot(average_x[:3600], average_y[:3600], color='blue', linewidth=2, marker='o', label='Average Plot', zorder=2)

# Set axis limits
ax.set_xlim(0, 1920)
ax.set_ylim(0, 1080)

# Invert the y-axis for top-left origin
ax.invert_yaxis()

# Add labels, title, and legend
ax.set_xlabel('X Values')
ax.set_ylabel('Y Values')
ax.set_title('Average Plot with Background Image (First 3600 Points)')
ax.legend()

# Show the average plot
plt.show()

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Folder path containing the CSV files
folder_path = '/content/Group 2'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-2 (1).png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[51000:54600]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points
            ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('x, pixels', fontsize=20)
            ax.set_ylabel('y, pixels', fontsize=20)
            plt.xticks(fontsize=15)
            plt.yticks(fontsize=15)
            #ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Folder path containing the CSV files
folder_path = '/content/Group 1'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-1 (6).png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[34200:37800]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points
            ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('X values (0 to 1920)')
            ax.set_ylabel('Y values (0 to 1080)')
            #ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Folder path containing the CSV files
folder_path = '/content/Group 1'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-1 (1).png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[0:3600]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points
            ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('x, pixels', fontsize = 20)
            ax.set_ylabel('y, pixels', fontsize = 20)
            plt.xticks(fontsize=15)
            plt.yticks(fontsize=15)
            #ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Folder path containing the CSV files
folder_path = '/content/Group 2'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-2 (2).png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[105600:109200]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points
            ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('X values (0 to 1920)')
            ax.set_ylabel('Y values (0 to 1080)')
            #ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Folder path containing the CSV files
folder_path = '/content/Group 2'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-2.png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[0:3600]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points
            ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('X values (0 to 1920)')
            ax.set_ylabel('Y values (0 to 1080)')
            ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")

pip install matplotlib

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from matplotlib.colors import Normalize

# Folder path containing the CSV files
folder_path = '/content/Group 2'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-2.png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Define distance threshold (for fixation detection)
fixation_distance_threshold = 10  # Arbitrary threshold for distance (adjust as needed)

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[:3600]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Calculate distance between consecutive points
            dx = data['x'].diff().fillna(0)
            dy = data['y'].diff().fillna(0)
            distance = np.sqrt(dx**2 + dy**2)

            # Identify fixation points where the distance is below the threshold
            fixation_points = distance < fixation_distance_threshold
            fixation_x = data['x'][fixation_points]
            fixation_y = data['y'][fixation_points]

            # Create a time scale from blue to green for the rest of the points
            norm = Normalize(vmin=0, vmax=len(data) - 1)
            cmap = plt.cm.winter  # Access colormap directly from plt.cm

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points with time color scale
            for i in range(len(data)):
                ax.plot(data['x'][i], data['y'][i], color=cmap(norm(i)), marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Plot the fixation points in red
            ax.scatter(fixation_x, fixation_y, color='red', marker='x', label='Fixation Points', zorder=3)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('X values (0 to 1920)')
            ax.set_ylabel('Y values (0 to 1080)')
            ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Add a colorbar for the time scale
            sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
            sm.set_array([])  # Empty array for colorbar
            plt.colorbar(sm, ax=ax, label='Time Progression')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")

import os
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Folder path containing the CSV files
folder_path = '/content/Group 1'  # Replace with your folder path
background_image_path = '/content/SENAI_Group-1 (5).png'  # Replace with your image path

# Load and resize background image to 1920x1080
background_image = Image.open(background_image_path).resize((1920, 1080))

# Loop through each file in the folder
for file_name in os.listdir(folder_path):
    if file_name.endswith('.csv'):  # Process only CSV files
        try:
            file_path = os.path.join(folder_path, file_name)

            # Load the CSV data without headers
            data = pd.read_csv(file_path, header=None, names=['x', 'y']).dropna()  # Drop empty rows

            # Limit data to 3600 points (if applicable)
            data = data.iloc[25800:29400]

            if data.empty:
                print(f"File {file_name} has no valid data. Skipping...")
                continue

            # Set up plot with specific axis limits
            fig, ax = plt.subplots(figsize=(10, 5.625))  # Adjusting to maintain a 16:9 aspect ratio

            # Display the image within the axes, fitted to 1920x1080 range
            ax.imshow(background_image, extent=[0, 1920, 1080, 0], aspect='auto', zorder=1)

            # Plot the x, y data points
            ax.plot(data['x'], data['y'], color='blue', marker='o', linestyle='-', linewidth=0.5, markersize=1, zorder=2)

            # Set axis limits to match the specified range
            ax.set_xlim(0, 1920)
            ax.set_ylim(0, 1080)

            # Invert the y-axis to place origin at the top-left corner for the plot only
            ax.invert_yaxis()

            # Set labels and title
            ax.set_xlabel('X values (0 to 1920)')
            ax.set_ylabel('Y values (0 to 1080)')
            ax.set_title(f'Plot of X, Y Data for {file_name} (Top-Left Origin for Plot)')

            # Show the plot
            plt.show()

        except Exception as e:
            print(f"Error processing file {file_name}: {e}")